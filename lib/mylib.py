import streamlit as st
import pandas as pd
import pickle
import json
import base64
import os
from sklearn.metrics.pairwise import cosine_similarity
import re
from underthesea import pos_tag, word_tokenize

@st.cache_resource
def load_vectorizer():
    with open('models/vectorizer.pkl', 'rb') as f:
        return pickle.load(f)

@st.cache_resource
def load_tfidf_matrix():
    with open('models/tfidf_matrix.pkl', 'rb') as f:
        return pickle.load(f)

@st.cache_resource
def load_svd_model():
    with open("models/svd_model_balanced.pkl", "rb") as f:
        return pickle.load(f)

# H√†m ƒë·ªçc file CSS
@st.cache_resource
def load_css(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        css = f.read()
    st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)

# h√†m ƒë·ªçc file csv t·∫°o th√†nh datafram
@st.cache_data
def load_csv_file(file_path, encoding='utf-8'):
    try:
        df = pd.read_csv(file_path, encoding=encoding)
        return df
    except FileNotFoundError:
        print(f"File '{file_path}' kh√¥ng t·ªìn t·∫°i.")
    except pd.errors.ParserError:
        print(f"L·ªói khi ƒë·ªçc file CSV '{file_path}'.")
    return None

# h√†m ƒë·ªçc file json
def read_json_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        print(f"File '{file_path}' kh√¥ng t·ªìn t·∫°i.")
    except json.JSONDecodeError:
        print(f"File '{file_path}' kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON.")
    return None

# Load stop words
STOP_WORD_FILE = 'data/vietnamese-stopwords.txt'
with open(STOP_WORD_FILE, 'r', encoding='utf-8') as file:
    stop_words = file.read()

stop_words = stop_words.split('\n')

# Load irrelevant words
with open('data/irrelevant.txt', 'r', encoding='utf-8') as file:
    irrelevant_word = file.read()

irrelevant_words = irrelevant_word.split('\n')

# Load ·∫£nh local d·∫°ng base64 ƒë·ªÉ nh√∫ng v√†o HTML
@st.cache_data
def image_to_base64(path):
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode()

    
# H√†m c·∫Øt b·ªõt text
def truncate_text(text, max_length=100):
    text = str(text) if text else ""
    return text[:max_length] + "..." if len(text) > max_length else text

# H√†m kh·ªüi t·∫°o session
def init_session_state():
    if "user_id" not in st.session_state:
        st.session_state.user_id = None
    if "show_login_form" not in st.session_state:
        st.session_state.show_login_form = False


def render_header():
    with st.container():
        

        # D√≤ng 1: T√™n ·ª©ng d·ª•ng
        st.markdown("<h2>üõí Recommendation Shopee</h2>", unsafe_allow_html=True)

        # D√≤ng 2: M√¥ t·∫£ ng·∫Øn
        st.markdown(
            """
            <p style='font-size:16px; color:#555;'>
                ·ª®ng d·ª•ng g·ª£i √Ω s·∫£n ph·∫©m s·ª≠ d·ª•ng Collaborative Filtering  & Content-Based Filtering
            </p>
            """,
            unsafe_allow_html=True
        )

        # D√≤ng 3: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        with st.expander("üìò H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
            st.markdown(
                """
                **C√°c t√≠nh nƒÉng ch√≠nh:**
                - üîç **Ch·ªçn User** ƒë·ªÉ xem c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω ri√™ng cho ng∆∞·ªùi d√πng ƒë√≥.
                - üõí **Ch·ªçn s·∫£n ph·∫©m** ƒë·ªÉ xem chi ti·∫øt v√† c√°c s·∫£n ph·∫©m li√™n quan.
                - üîê **T√¨m ki·∫øm** s·∫£n ph·∫©m b·∫±ng t·ª´ kho√° (VD: 'gi√†y', '√°o thun',...).

                **C√°ch s·ª≠ d·ª•ng:**
                1. Ch·ªçn m·ªôt **User** v√†/ho·∫∑c m·ªôt **S·∫£n ph·∫©m** ·ªü ph√≠a tr√™n.
                2. K√©o xu·ªëng ƒë·ªÉ xem **danh s√°ch g·ª£i √Ω** ho·∫∑c **chi ti·∫øt s·∫£n ph·∫©m**.
                3. D√πng thanh t√¨m ki·∫øm ƒë·ªÉ kh√°m ph√° c√°c s·∫£n ph·∫©m theo t·ª´ kho√° mong mu·ªën.
                """
            )

        
def clean_text(input_text):
    """L√†m s·∫°ch vƒÉn b·∫£n theo c√°c b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω"""

    global stop_words
    global irrelevant_words
    
    if not input_text:  # Check if input is empty
        return ""

    # Step 1: Convert text to lowercase
    text_lower = input_text.lower()
    
    # Step 2: Delete link (URL)
    text_lower = re.sub(r"https?://\S+|www\.\S+", "", text_lower)
    
    # Step 3: Remove special characters, numbers and punctuation (keep only letters and spaces)
    text_no_special = re.sub(r"[^a-zA-Z√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë\s]", "", text_lower)
    
    # Step 4: Tokenize and remove stopwords
    tokens_vn = word_tokenize(text_no_special, format="text").split()
    filtered_tokens_vn = [token for token in tokens_vn if token not in stop_words]
    text_no_stopwords_vn = " ".join(filtered_tokens_vn)
    
    # Step 5: Label the word types, keeping only nouns (N), verbs (V) and adjectives (A)
    pos_result = pos_tag(text_no_stopwords_vn)
    important_tokens = [word for word, pos in pos_result if pos.startswith("N") or pos.startswith("V") or pos.startswith("A")]
    
    # Step 6: Filter out irrelevant words
    final_tokens = [word for word in important_tokens if word not in irrelevant_words]
    
    return " ".join(final_tokens)

def recommend_products_by_search(query, products_df, vectorizer, tfidf_matrix, top_n=6):
    query_cleaned = clean_text(query)  # üîπ L√†m s·∫°ch vƒÉn b·∫£n t√¨m ki·∫øm
    query_vector = vectorizer.transform([query_cleaned])  # üîπ Vector h√≥a sau khi l√†m s·∫°ch

    cosine_sim = cosine_similarity(query_vector, tfidf_matrix).flatten()
    top_indices = cosine_sim.argsort()[::-1]
    top_indices = [i for i in top_indices if i < len(products_df)][:top_n]

    if not top_indices:
        return pd.DataFrame()

    results_df = products_df.iloc[top_indices].copy()
    results_df["similarity"] = cosine_sim[top_indices]

    return results_df


def render_search_result(search_query, products_df, placeholder_image, vectorizer, tfidf_matrix):
    # search_query = st.session_state.get("search_query", "").strip()

    if search_query:
        # G·ª£i √Ω s·∫£n ph·∫©m theo n·ªôi dung m√¥ t·∫£/t√™n s·∫£n ph·∫©m
        suggested_df = recommend_products_by_search(
            search_query, products_df, vectorizer, tfidf_matrix, top_n=6
        )

        st.markdown("## üîé K·∫øt qu·∫£ t√¨m ki·∫øm")

        if suggested_df.empty:
            st.warning("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.")
        else:
            cols = st.columns(3)
            for i, (_, row) in enumerate(suggested_df.iterrows()):
                with cols[i % 3]:
                    render_product_card_product(row, placeholder_image)

        st.stop()



# H√†m t·∫°o form ƒëƒÉng nh·∫≠p
def render_login_form(ratings_df):
    if not st.session_state.user_id and st.session_state.show_login_form:
        with st.form("login_form"):
            st.markdown("## ƒêƒÉng nh·∫≠p")
            user_input = st.text_input("Nh·∫≠p user_id c·ªßa b·∫°n", placeholder="VD: 148")
            submitted = st.form_submit_button("ƒêƒÉng nh·∫≠p")
            if submitted:
                if user_input.isdigit():
                    user_id = int(user_input)
                    if user_id in ratings_df["user_id"].values:
                        st.session_state.user_id = user_id
                        st.success(f"üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Xin ch√†o User {user_id}")
                        st.rerun()
                    else:
                        st.error("‚ùå User ID kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.")
                else:
                    st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p user_id l√† s·ªë.")


def get_recommended_products(user_id, users_df, products_df):
    try:
        user_id = int(user_id)
        user_row = users_df[users_df["user_id"] == user_id]
        if not user_row.empty:
            top_products = user_row.iloc[0]["top_products"]
            return products_df[products_df["product_id"].isin(top_products)]
    except:
        st.warning("user_id kh√¥ng h·ª£p l·ªá.")
    return pd.DataFrame()


def render_product_card_product(row, placeholder_image):
    """Hi·ªÉn th·ªã th·∫ª s·∫£n ph·∫©m (product card) t·ª´ d√≤ng d·ªØ li·ªáu (row)"""
    image_path = row.get('image', '')
    if not image_path or str(image_path).strip().lower() in ['nan', 'none', 'null', '']:
        image_path = placeholder_image

    # T·∫°o HTML cho ·∫£nh s·∫£n ph·∫©m
    if os.path.exists(image_path):
        base64_img = image_to_base64(image_path)
        image_html = f'<img src="data:image/jpeg;base64,{base64_img}" alt="Product Image">'
    elif str(image_path).startswith("http"):
        image_html = f'<img src="{image_path}" alt="Product Image">'
    else:
        base64_img = image_to_base64(placeholder_image)
        image_html = f'<img src="data:image/jpeg;base64,{base64_img}" alt="Product Image">'

    # L·∫•y ƒë√°nh gi√° v√† t·∫°o chu·ªói sao
    rating = row.get('rating', 0)
    try:
        rating = float(rating)
    except:
        rating = 0
    full_stars = int(rating)
    half_star = rating - full_stars >= 0.5
    star_html = '‚≠ê' * full_stars + ('‚ú®' if half_star else '')

    # T·∫°o th·∫ª HTML hi·ªÉn th·ªã
    st.markdown(f"""
    <div class="card-wrapper">
        <div class="card">
            <div class="card-img">{image_html}</div>
            <div class="card-title">
                <a href="/?product_id={row['product_id']}" style="text-decoration: none; color: inherit;">
                    {truncate_text(row.get('product_name', 'Kh√¥ng t√™n'), max_length=60)}
                </a>
            </div>
            <div class="card-id"><strong>M√£ s·∫£n ph·∫©m:</strong> {row.get('product_id', 'N/A')}</div>
            <div class="card-subcat"><strong>Danh m·ª•c:</strong> {row.get('sub_category', 'Kh√¥ng r√µ')}</div>
            <div class="card-rating">ƒê√°nh gi√°: {star_html} ({rating:.1f}/5)</div>
            <div class="card-price">Gi√°: {int(row.get('price', 0)):,}ƒë</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã m√¥ t·∫£ trong expander
    with st.expander("üìÑ Xem m√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m"):
        st.markdown(row.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£'))



# Hi·ªÉn th·ªã moule s·∫£n ph·∫©m li√™n quan
def render_recommended_products_ralated(related_products, placeholder_image):
    st.markdown("<h3 style='margin-top:40px;'>üß© S·∫£n ph·∫©m li√™n quan</h3>", unsafe_allow_html=True)

    cols = st.columns(3)
    for i, (_, row) in enumerate(related_products.iterrows()):
        with cols[i % 3]:
            render_product_card_product(row, placeholder_image)

# Hi·ªÉn th·ªã moule s·∫£n ph·∫©m g·ª£i √Ω cho user
def render_recommended_products_for_user(recommendation_products, placeholder_image):
    # st.markdown("<h3 style='margin-top:40px;'>üîÅ C√≥ th·ªÉ b·∫°n th√≠ch</h3>", unsafe_allow_html=True)

    cols = st.columns(3)
    for i, (_, row) in enumerate(recommendation_products.iterrows()):
        with cols[i % 3]:
            render_product_card_product(row, placeholder_image)





# H√†m hi·ªÉn thi chi ti·∫øt s·∫£n ph·∫©m
def render_detail_product(product, placeholder_image):
    # ·∫¢nh
    image_path = product.get('image', '')
    if not image_path or str(image_path).strip().lower() in ['nan', 'none', 'null', '']:
        image_path = placeholder_image

    if os.path.exists(image_path):
        base64_img = image_to_base64(image_path)
        image_html = f'<img src="data:image/jpeg;base64,{base64_img}" />'
    elif str(image_path).startswith("http"):
        image_html = f'<img src="{image_path}" />'
    else:
        base64_img = image_to_base64(placeholder_image)
        image_html = f'<img src="data:image/jpeg;base64,{base64_img}" />'

    # HTML layout
    st.markdown("[üîô Quay v·ªÅ trang ch√≠nh](/)", unsafe_allow_html=True)
    st.markdown(f"""
    <div class="product-detail-container">
        <div class="product-detail-left">
            {image_html}
        </div>
        <div class="product-detail-right">
            <div class="product-name">{product.get('product_name', 'Kh√¥ng t√™n')}</div>
            <div class="product-rating">‚≠ê‚≠ê‚≠ê‚≠ê‚òÜ</div>
            <div class="product-price">{int(product.get('price', 0)):,}ƒë</div>
            <div class="product-category">Danh m·ª•c: {product.get('category', 'Kh√¥ng r√µ')}</div>
            <button class="buy-button" onclick="alert('Ch·ª©c nƒÉng mua h√†ng ch∆∞a k√≠ch ho·∫°t')">üõç Mua ngay</button>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # M√¥ t·∫£ s·∫£n ph·∫©m
        # M√¥ t·∫£ s·∫£n ph·∫©m (·∫©n trong expander)
    with st.expander("üìù Xem m√¥ t·∫£ s·∫£n ph·∫©m"):
        st.markdown(f"""
        <div class="product-description-content">
            {product.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£.')}
        </div>
        """, unsafe_allow_html=True)

    st.markdown("---")
    

def get_similar_products(product_id, products_df, tfidf_matrix, top_n=6):
    if product_id not in products_df['product_id'].values:
        return pd.DataFrame()

    idx_list = products_df.index[products_df['product_id'] == product_id].tolist()
    if not idx_list:
        return pd.DataFrame()

    idx = idx_list[0]

    if idx >= tfidf_matrix.shape[0]:
        return pd.DataFrame()

    product_vec = tfidf_matrix[idx]

    # T√≠nh cosine gi·ªØa s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn v√† to√†n b·ªô s·∫£n ph·∫©m
    cosine_scores = cosine_similarity(product_vec, tfidf_matrix).flatten()

    # S·∫Øp x·∫øp v√† l·∫•y top ch·ªâ s·ªë s·∫£n ph·∫©m t∆∞∆°ng t·ª±
    similar_indices = cosine_scores.argsort()[::-1]

    # Lo·∫°i b·ªè ch√≠nh n√≥
    similar_indices = [i for i in similar_indices if i != idx]

    # L·ªçc ch·ªâ s·ªë h·ª£p l·ªá ƒë·ªÉ tr√°nh l·ªói
    valid_indices = [i for i in similar_indices if i < len(products_df)]

    return products_df.iloc[valid_indices[:top_n]]


def get_recommendations_for_user(user_id, ratings_df, model, top_n=10):
    if user_id not in ratings_df['user_id'].unique():
        return pd.DataFrame([], columns=['product_id', 'EstimateScore'])

    all_products = ratings_df['product_id'].unique()
    rated_products = ratings_df[ratings_df['user_id'] == user_id]['product_id'].unique()
    products_to_predict = [pid for pid in all_products if pid not in rated_products]

    predictions = []
    for pid in products_to_predict:
        try:
            pred = model.predict(user_id, pid).est
            predictions.append((pid, pred))
        except:
            continue  # B·ªè qua n·∫øu model kh√¥ng th·ªÉ d·ª± ƒëo√°n

    predictions.sort(key=lambda x: x[1], reverse=True)
    top_products = pd.DataFrame(predictions[:top_n], columns=['product_id', 'EstimateScore'])
    return top_products
